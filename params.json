{"name":"Node-cache","body":"# node-cache\r\n\r\nA simple in-memory cache for node.js\r\n\r\n## Installation\r\n\r\n    npm install memory-cache\r\n\r\n## Usage\r\n\r\n    var cache = require('memory-cache');\r\n\r\n    // now just use the cache\r\n\r\n    cache.put('foo', 'bar');\r\n    console.log(cache.get('foo'))\r\n\r\n    // that wasn't too interesting, here's the good part\r\n\r\n    cache.put('houdini', 'disapear', 100) // Time in ms\r\n    console.log('Houdini will now ' + cache.get('houdini'));\r\n\r\n    setTimeout(function() {\r\n      console.log('Houdini is ' + cache.get('houdini'));\r\n    }, 200);\r\n\r\nwhich should print\r\n\r\n    bar\r\n    Houdini will now disapear\r\n    Houdini is null\r\n\r\n## API\r\n\r\n### put = function(key, value, time)\r\n\r\n* Simply stores a value. \r\n* If time isn't passed in, it is stored forever.\r\n* Will actually remove the value in the specified time (via `setTimeout`)\r\n\r\n### get = function(key)\r\n\r\n* Retreives a value for a given key\r\n\r\n### del = function(key)\r\n\r\n* Deletes a key\r\n\r\n### size = function()\r\n\r\n* Returns the current number of entries in the cache\r\n\r\n### memsize = function()\r\n\r\n* Returns the number of entries taking up space in the cache\r\n* Will usually `== size()` unless a `setTimeout` removal went wrong\r\n\r\n### debug = function(bool)\r\n\r\n* Turns on or off debugging\r\n\r\n### hits = function()\r\n\r\n* Returns the number of cache hits\r\n\r\n### misses = function()\r\n\r\n* Returns the number of cache misses.\r\n\r\n## TODO\r\n\r\n* Namespaces\r\n* A way of walking the cache for diagnostic purposes\r\n\r\n## Note on Patches/Pull Requests\r\n \r\n* Fork the project.\r\n* Make your feature addition or bug fix.\r\n* Send me a pull request.","tagline":"A simple in-memory cache for nodejs (or node.js or node, or whatever you call it)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}